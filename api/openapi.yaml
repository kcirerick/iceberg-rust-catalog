openapi: 3.0.3
info:
  description: "Defines the specification for the first version of the REST Catalog\
    \ API. Implementations should ideally support both Iceberg table specs v1 and\
    \ v2, with priority given to v2."
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Apache Iceberg REST Catalog API
  version: 0.0.1
servers:
- description: Server URL when the port can be inferred from the scheme
  url: "{scheme}://{host}/{basePath}"
  variables:
    scheme:
      default: https
      description: "The scheme of the URI, either http or https."
    host:
      default: localhost
      description: The host address for the specified server
    basePath:
      default: ""
      description: Optional prefix to be appended to all routes
- description: "Generic base server URL, with all parts configurable"
  url: "{scheme}://{host}:{port}/{basePath}"
  variables:
    scheme:
      default: https
      description: "The scheme of the URI, either http or https."
    host:
      default: localhost
      description: The host address for the specified server
    port:
      default: "443"
      description: The port used when addressing the host
    basePath:
      default: ""
      description: Optional prefix to be appended to all routes
security:
- OAuth2:
  - catalog
- BearerAuth: []
paths:
  /v1/config:
    get:
      description: " All REST clients should first call this route to get catalog\
        \ configuration properties from the server to configure the catalog and its\
        \ HTTP client. Configuration from the server consists of two sets of key/value\
        \ pairs.\n- defaults -  properties that should be used as default configuration;\
        \ applied before client configuration\n- overrides - properties that should\
        \ be used to override client configuration; applied after defaults and client\
        \ configuration\n\nCatalog configuration is constructed by setting the defaults,\
        \ then client- provided configuration, and finally overrides. The final property\
        \ set is then used to configure the catalog.\n\nFor example, a default configuration\
        \ property might set the size of the client pool, which can be replaced with\
        \ a client-specific setting. An override might be used to set the warehouse\
        \ location, which is stored on the server rather than in client configuration.\n\
        \nCommon catalog configuration settings are documented at https://iceberg.apache.org/docs/latest/configuration/#catalog-properties "
      operationId: getConfig
      parameters:
      - description: Warehouse location or identifier to request from the service
        explode: true
        in: query
        name: warehouse
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                overrides:
                  warehouse: s3://bucket/warehouse/
                defaults:
                  clients: "4"
              schema:
                $ref: '#/components/schemas/CatalogConfig'
          description: Server specified configuration values.
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: List all catalog configuration settings
      tags:
      - Configuration API
  /v1/oauth/tokens:
    post:
      description: |-
        Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.

        This endpoint is used for three purposes -
        1. To exchange client credentials (client ID and secret) for an access token This uses the client credentials flow.
        2. To exchange a client token and an identity token for a more specific access token This uses the token exchange flow.
        3. To exchange an access token for one with the same claims and a refreshed expiration period This uses the token exchange flow.

        For example, a catalog client may be configured with client credentials from the OAuth2 Authorization flow. This client would exchange its client ID and secret for an access token using the client credentials request with this endpoint (1). Subsequent requests would then use that access token.

        Some clients may also handle sessions that have additional user context. These clients would use the token exchange flow to exchange a user token (the "subject" token) from the session for a more specific access token for that user, using the catalog's access token as the "actor" token (2). The user ID token is the "subject" token and can be any token type allowed by the OAuth2 token exchange flow, including a unsecured JWT token with a sub claim. This request should use the catalog's bearer token in the "Authorization" header.

        Clients may also use the token exchange flow to refresh a token that is about to expire by sending a token exchange request (3). The request's "subject" token should be the expiring token. This request should use the subject token in the "Authorization" header.
      operationId: getToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthTokenRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
          description: OAuth2 token response for client credentials or token exchange
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
          description: OAuth2 error response
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
          description: OAuth2 error response
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
          description: OAuth2 error response
      summary: Get a token using an OAuth2 flow
      tags:
      - OAuth2 API
  /v1/{prefix}/namespaces:
    get:
      description: "List all namespaces at a certain level, optionally starting from\
        \ a given parent namespace. If table accounting.tax.paid.info exists, using\
        \ 'SELECT NAMESPACE IN accounting' would translate into `GET /namespaces?parent=accounting`\
        \ and must return a namespace, [\"accounting\", \"tax\"] only. Using 'SELECT\
        \ NAMESPACE IN accounting.tax' would translate into `GET /namespaces?parent=accounting%1Ftax`\
        \ and must return a namespace, [\"accounting\", \"tax\", \"paid\"]. If `parent`\
        \ is not provided, all top-level namespaces should be listed."
      operationId: listNamespaces
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: true
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          $ref: '#/components/schemas/PageToken'
        style: form
      - description: "For servers that support pagination, this signals an upper bound\
          \ of the number of results that a client will receive. For servers that\
          \ do not support pagination, clients may receive results larger than the\
          \ indicated `pageSize`."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      - allowEmptyValue: true
        description: "An optional namespace, underneath which to list namespaces.\
          \ If not provided or empty, all top-level namespaces should be listed. If\
          \ parent is a multipart namespace, the parts must be separated by the unit\
          \ separator (`0x1F`) byte."
        example: accounting%1Ftax
        explode: true
        in: query
        name: parent
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                NonEmptyResponse:
                  $ref: '#/components/examples/ListNamespacesNonEmptyExample'
                EmptyResponse:
                  $ref: '#/components/examples/ListNamespacesEmptyExample'
              schema:
                $ref: '#/components/schemas/ListNamespacesResponse'
          description: A list of namespaces
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NoSuchNamespaceExample:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - Namespace provided in the `parent` query parameter
            is not found.
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: "List namespaces, optionally providing a parent namespace to list underneath"
      tags:
      - Catalog API
    post:
      description: "Create a namespace, with an optional set of properties. The server\
        \ might also add properties, such as `last_modified_time` etc."
      operationId: createNamespace
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                namespace:
                - accounting
                - tax
                properties:
                  owner: Ralph
                  created_at: "1452120468"
              schema:
                $ref: '#/components/schemas/CreateNamespaceResponse'
          description: "Represents a successful call to create a namespace. Returns\
            \ the namespace created, as well as any properties that were stored for\
            \ the namespace, including those the server might have added. Implementations\
            \ are not required to support namespace properties."
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "406":
          content:
            application/json:
              example:
                error:
                  message: The server does not support this operation
                  type: UnsupportedOperationException
                  code: 406
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Not Acceptable / Unsupported Operation. The server does not
            support this operation.
        "409":
          content:
            application/json:
              examples:
                NamespaceAlreadyExists:
                  $ref: '#/components/examples/NamespaceAlreadyExistsError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Conflict - The namespace already exists
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Create a namespace
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}:
    delete:
      operationId: dropNamespace
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NoSuchNamespaceExample:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - Namespace to delete does not exist.
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Drop a namespace from the catalog. Namespace must be empty.
      tags:
      - Catalog API
    get:
      description: Return all stored metadata properties for a given namespace
      operationId: loadNamespaceMetadata
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceResponse'
          description: "Returns a namespace, as well as any properties stored on the\
            \ namespace if namespace properties are supported by the server."
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NoSuchNamespaceExample:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - Namespace not found
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Load the metadata properties for a namespace
      tags:
      - Catalog API
    head:
      description: Check if a namespace exists. The response does not contain a body.
      operationId: namespaceExists
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NoSuchNamespaceExample:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - Namespace not found
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Check if a namespace exists
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}/properties:
    post:
      description: |-
        Set and/or remove properties on a namespace. The request body specifies a list of properties to remove and a map of key value pairs to update.
        Properties that are not in the request are not modified or removed by this call.
        Server implementations are not required to support namespace properties.
      operationId: updateProperties
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              UpdateAndRemoveProperties:
                $ref: '#/components/examples/UpdateAndRemoveNamespacePropertiesRequest'
            schema:
              $ref: '#/components/schemas/UpdateNamespacePropertiesRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                updated:
                - owner
                removed:
                - foo
                missing:
                - bar
              schema:
                $ref: '#/components/schemas/UpdateNamespacePropertiesResponse'
          description: JSON data response for a synchronous update properties request.
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - Namespace not found
        "406":
          content:
            application/json:
              example:
                error:
                  message: The server does not support this operation
                  type: UnsupportedOperationException
                  code: 406
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Not Acceptable / Unsupported Operation. The server does not
            support this operation.
        "422":
          content:
            application/json:
              examples:
                UnprocessableEntityDuplicateKey:
                  $ref: '#/components/examples/UnprocessableEntityDuplicateKey'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unprocessable Entity - A property key was included in both
            `removals` and `updates`
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Set or remove properties on a namespace
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}/tables:
    get:
      description: Return all table identifiers under this namespace
      operationId: listTables
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: true
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          $ref: '#/components/schemas/PageToken'
        style: form
      - description: "For servers that support pagination, this signals an upper bound\
          \ of the number of results that a client will receive. For servers that\
          \ do not support pagination, clients may receive results larger than the\
          \ indicated `pageSize`."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                ListTablesResponseNonEmpty:
                  $ref: '#/components/examples/ListTablesNonEmptyExample'
                ListTablesResponseEmpty:
                  $ref: '#/components/examples/ListTablesEmptyExample'
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
          description: A list of table identifiers
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - The namespace specified does not exist
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: List all table identifiers underneath a given namespace
      tags:
      - Catalog API
    post:
      description: |-
        Create a table or start a create transaction, like atomic CTAS.

        If `stage-create` is false, the table is created immediately.

        If `stage-create` is true, the table is not created, but table metadata is initialized and returned. The service should prepare as needed for a commit to the table commit endpoint to complete the create transaction. The client uses the returned metadata to begin a transaction. To commit the transaction, the client sends all create and subsequent changes to the table commit route. Changes from the table create operation include changes like AddSchemaUpdate and SetCurrentSchemaUpdate that set the initial table state.
      operationId: createTable
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Optional signal to the server that the client supports delegated access via a comma-separated list of access mechanisms.  The server may choose to supply access via any or none of the requested mechanisms.

          Specific properties and handling for `vended-credentials` is documented in the `LoadTableResult` schema section of this spec document.

          The protocol and specification for `remote-signing` is documented in  the `s3-signer-open-api.yaml` OpenApi spec in the `aws` module.
        example: "vended-credentials,remote-signing"
        explode: false
        in: header
        name: X-Iceberg-Access-Delegation
        required: false
        schema:
          enum:
          - vended-credentials
          - remote-signing
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadTableResult'
          description: Table metadata result after creating a table
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - The namespace specified does not exist
        "409":
          content:
            application/json:
              examples:
                NamespaceAlreadyExists:
                  $ref: '#/components/examples/TableAlreadyExistsError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Conflict - The table already exists
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Create a table in the given namespace
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}/register:
    post:
      description: Register a table using given metadata file location.
      operationId: registerTable
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTableRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadTableResult'
          description: Table metadata result when loading a table
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Not Found - The namespace specified does not exist
        "409":
          content:
            application/json:
              examples:
                NamespaceAlreadyExists:
                  $ref: '#/components/examples/TableAlreadyExistsError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Conflict - The table already exists
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Register a table in the given namespace using given metadata file location
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}/tables/{table}:
    delete:
      description: Remove a table from the catalog
      operationId: dropTable
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A table name
        example: sales
        explode: false
        in: path
        name: table
        required: true
        schema:
          type: string
        style: simple
      - description: Whether the user requested to purge the underlying table's data
          and metadata
        explode: true
        in: query
        name: purgeRequested
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                TableToDeleteDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Not Found - NoSuchTableException, Table to drop does not exist"
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Drop a table from the catalog
      tags:
      - Catalog API
    get:
      description: |-
        Load a table from the catalog.

        The response contains both configuration and table metadata. The configuration, if non-empty is used as additional configuration for the table that overrides catalog configuration. For example, this configuration may change the FileIO implementation to be used for the table.

        The response also contains the table's full metadata, matching the table metadata JSON file.

        The catalog configuration may contain credentials that should be used for subsequent requests for the table. The configuration key "token" is used to pass an access token to be used as a bearer token for table requests. Otherwise, a token may be passed using a RFC 8693 token type as a configuration key. For example, "urn:ietf:params:oauth:token-type:jwt=<JWT-token>".
      operationId: loadTable
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A table name
        example: sales
        explode: false
        in: path
        name: table
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Optional signal to the server that the client supports delegated access via a comma-separated list of access mechanisms.  The server may choose to supply access via any or none of the requested mechanisms.

          Specific properties and handling for `vended-credentials` is documented in the `LoadTableResult` schema section of this spec document.

          The protocol and specification for `remote-signing` is documented in  the `s3-signer-open-api.yaml` OpenApi spec in the `aws` module.
        example: "vended-credentials,remote-signing"
        explode: false
        in: header
        name: X-Iceberg-Access-Delegation
        required: false
        schema:
          enum:
          - vended-credentials
          - remote-signing
          type: string
        style: simple
      - description: |-
          The snapshots to return in the body of the metadata. Setting the value to `all` would return the full set of snapshots currently valid for the table. Setting the value to `refs` would load all snapshots referenced by branches or tags.
          Default if no param is provided is `all`.
        explode: true
        in: query
        name: snapshots
        required: false
        schema:
          enum:
          - all
          - refs
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadTableResult'
          description: Table metadata result when loading a table
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                TableToLoadDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Not Found - NoSuchTableException, table to load does not exist"
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Load a table from the catalog
      tags:
      - Catalog API
    head:
      description: Check if a table exists within a given namespace. The response
        does not contain a body.
      operationId: tableExists
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A table name
        example: sales
        explode: false
        in: path
        name: table
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                TableToLoadDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Not Found - NoSuchTableException, Table not found"
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Check if a table exists
      tags:
      - Catalog API
    post:
      description: |-
        Commit updates to a table.

        Commits have two parts, requirements and updates. Requirements are assertions that will be validated before attempting to make and commit changes. For example, `assert-ref-snapshot-id` will check that a named ref's snapshot ID has a certain value.

        Updates are changes to make to table metadata. For example, after asserting that the current main ref is at the expected snapshot, a commit may add a new child snapshot and set the ref to the new snapshot id.

        Create table transactions that are started by createTable with `stage-create` set to true are committed using this route. Transactions should include all changes to the table, including table initialization, like AddSchemaUpdate and SetCurrentSchemaUpdate. The `assert-create` requirement is used to ensure that the table was not created concurrently.
      operationId: updateTable
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A table name
        example: sales
        explode: false
        in: path
        name: table
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitTableRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitTableResponse'
          description: |-
            Response used when a table is successfully updated.
            The table metadata JSON is returned in the metadata field. The corresponding file location of table metadata must be returned in the metadata-location field. Clients can check whether metadata has changed by comparing metadata locations.
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                TableToUpdateDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Not Found - NoSuchTableException, table to load does not exist"
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Conflict - CommitFailedException, one or more requirements\
            \ failed. The client may retry."
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "500":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: CommitStateUnknownException
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: An unknown server-side problem occurred; the commit state is
            unknown.
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "502":
          content:
            application/json:
              example:
                error:
                  message: Invalid response from the upstream server
                  type: CommitStateUnknownException
                  code: 502
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A gateway or proxy received an invalid response from the upstream
            server; the commit state is unknown.
        "504":
          content:
            application/json:
              example:
                error:
                  message: Gateway timed out during commit
                  type: CommitStateUnknownException
                  code: 504
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side gateway timeout occurred; the commit state is
            unknown.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Bad Gateway
                  type: InternalServerError
                  code: 502
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable on the
            client.
      summary: Commit updates to a table
      tags:
      - Catalog API
  /v1/{prefix}/tables/rename:
    post:
      description: "Rename a table from one identifier to another. It's valid to move\
        \ a table across namespaces, but the server implementation is not required\
        \ to support it."
      operationId: renameTable
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              RenameTableSameNamespace:
                $ref: '#/components/examples/RenameTableSameNamespace'
            schema:
              $ref: '#/components/schemas/RenameTableRequest'
        description: Current table identifier to rename and new table identifier to
          rename to
        required: true
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                TableToRenameDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
                NamespaceToRenameToDoesNotExist:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Not Found - NoSuchTableException, Table to rename does not\
            \ exist - NoSuchNamespaceException, The target namespace of the new table\
            \ identifier does not exist"
        "406":
          content:
            application/json:
              example:
                error:
                  message: The server does not support this operation
                  type: UnsupportedOperationException
                  code: 406
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Not Acceptable / Unsupported Operation. The server does not
            support this operation.
        "409":
          content:
            application/json:
              example:
                $ref: '#/components/examples/TableAlreadyExistsError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Conflict - The target identifier to rename to already exists
            as a table or view
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Rename a table from its current name to a new name
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}/tables/{table}/metrics:
    post:
      operationId: reportMetrics
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A table name
        example: sales
        explode: false
        in: path
        name: table
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportMetricsRequest'
        description: The request containing the metrics report to be sent
        required: true
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                TableToLoadDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Not Found - NoSuchTableException, table to load does not exist"
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Send a metrics report to this endpoint to be processed by the backend
      tags:
      - Catalog API
  /v1/{prefix}/transactions/commit:
    post:
      operationId: commitTransaction
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitTransactionRequest'
        description: |-
          Commit updates to multiple tables in an atomic operation

          A commit for a single table consists of a table identifier with requirements and updates. Requirements are assertions that will be validated before attempting to make and commit changes. For example, `assert-ref-snapshot-id` will check that a named ref's snapshot ID has a certain value.

          Updates are changes to make to table metadata. For example, after asserting that the current main ref is at the expected snapshot, a commit may add a new child snapshot and set the ref to the new snapshot id.
        required: true
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                TableToUpdateDoesNotExist:
                  $ref: '#/components/examples/NoSuchTableError'
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Not Found - NoSuchTableException, table to load does not exist"
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Conflict - CommitFailedException, one or more requirements\
            \ failed. The client may retry."
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "500":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: CommitStateUnknownException
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: An unknown server-side problem occurred; the commit state is
            unknown.
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "502":
          content:
            application/json:
              example:
                error:
                  message: Invalid response from the upstream server
                  type: CommitStateUnknownException
                  code: 502
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A gateway or proxy received an invalid response from the upstream
            server; the commit state is unknown.
        "504":
          content:
            application/json:
              example:
                error:
                  message: Gateway timed out during commit
                  type: CommitStateUnknownException
                  code: 504
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side gateway timeout occurred; the commit state is
            unknown.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Bad Gateway
                  type: InternalServerError
                  code: 502
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable on the
            client.
      summary: Commit updates to multiple tables in an atomic operation
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}/views:
    get:
      description: Return all view identifiers under this namespace
      operationId: listViews
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: true
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          $ref: '#/components/schemas/PageToken'
        style: form
      - description: "For servers that support pagination, this signals an upper bound\
          \ of the number of results that a client will receive. For servers that\
          \ do not support pagination, clients may receive results larger than the\
          \ indicated `pageSize`."
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                ListTablesResponseNonEmpty:
                  $ref: '#/components/examples/ListTablesNonEmptyExample'
                ListTablesResponseEmpty:
                  $ref: '#/components/examples/ListTablesEmptyExample'
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
          description: A list of table identifiers
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Not Found - The namespace specified does not exist
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: List all view identifiers underneath a given namespace
      tags:
      - Catalog API
    post:
      description: Create a view in the given namespace.
      operationId: createView
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateViewRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadViewResult'
          description: View metadata result when loading a view
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                NamespaceNotFound:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Not Found - The namespace specified does not exist
        "409":
          content:
            application/json:
              examples:
                NamespaceAlreadyExists:
                  $ref: '#/components/examples/ViewAlreadyExistsError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Conflict - The view already exists
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Create a view in the given namespace
      tags:
      - Catalog API
  /v1/{prefix}/namespaces/{namespace}/views/{view}:
    delete:
      description: Remove a view from the catalog
      operationId: dropView
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A view name
        example: sales
        explode: false
        in: path
        name: view
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Success, no content"
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                ViewToDeleteDoesNotExist:
                  $ref: '#/components/examples/NoSuchViewError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: "Not Found - NoSuchViewException, view to drop does not exist"
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Drop a view from the catalog
      tags:
      - Catalog API
    get:
      description: |-
        Load a view from the catalog.

        The response contains both configuration and view metadata. The configuration, if non-empty is used as additional configuration for the view that overrides catalog configuration.

        The response also contains the view's full metadata, matching the view metadata JSON file.

        The catalog configuration may contain credentials that should be used for subsequent requests for the view. The configuration key "token" is used to pass an access token to be used as a bearer token for view requests. Otherwise, a token may be passed using a RFC 8693 token type as a configuration key. For example, "urn:ietf:params:oauth:token-type:jwt=<JWT-token>".
      operationId: loadView
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A view name
        example: sales
        explode: false
        in: path
        name: view
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadViewResult'
          description: View metadata result when loading a view
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                ViewToLoadDoesNotExist:
                  $ref: '#/components/examples/NoSuchViewError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: "Not Found - NoSuchViewException, view to load does not exist"
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Load a view from the catalog
      tags:
      - Catalog API
    head:
      description: Check if a view exists within a given namespace. This request does
        not return a response body.
      operationId: viewExists
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A view name
        example: sales
        explode: false
        in: path
        name: view
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Success, no content"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Check if a view exists
      tags:
      - Catalog API
    post:
      description: Commit updates to a view.
      operationId: replaceView
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace identifier as a single string. Multipart namespace
          parts should be separated by the unit separator (`0x1F`) byte.
        examples:
          singlepart_namespace:
            value: accounting
          multipart_namespace:
            value: accounting%1Ftax
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: A view name
        example: sales
        explode: false
        in: path
        name: view
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitViewRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadViewResult'
          description: View metadata result when loading a view
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                ViewToUpdateDoesNotExist:
                  $ref: '#/components/examples/NoSuchViewError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: "Not Found - NoSuchViewException, view to load does not exist"
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Conflict - CommitFailedException. The client may retry.
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "500":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: CommitStateUnknownException
                  code: 500
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: An unknown server-side problem occurred; the commit state is
            unknown.
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "502":
          content:
            application/json:
              example:
                error:
                  message: Invalid response from the upstream server
                  type: CommitStateUnknownException
                  code: 502
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: A gateway or proxy received an invalid response from the upstream
            server; the commit state is unknown.
        "504":
          content:
            application/json:
              example:
                error:
                  message: Gateway timed out during commit
                  type: CommitStateUnknownException
                  code: 504
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: A server-side gateway timeout occurred; the commit state is
            unknown.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Bad Gateway
                  type: InternalServerError
                  code: 502
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: A server-side problem that might not be addressable on the
            client.
      summary: Replace a view
      tags:
      - Catalog API
  /v1/{prefix}/views/rename:
    post:
      description: "Rename a view from one identifier to another. It's valid to move\
        \ a view across namespaces, but the server implementation is not required\
        \ to support it."
      operationId: renameView
      parameters:
      - description: An optional prefix in the path
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              RenameViewSameNamespace:
                $ref: '#/components/examples/RenameViewSameNamespace'
            schema:
              $ref: '#/components/schemas/RenameTableRequest'
        description: Current view identifier to rename and new view identifier to
          rename to
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              example:
                error:
                  message: Malformed request
                  type: BadRequestException
                  code: 400
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Indicates a bad request error. It could be caused by an unexpected\
            \ request body format or other forms of request validation failure, such\
            \ as invalid json. Usually serves application/json content, although in\
            \ some cases simple text/plain content might be returned by the server's\
            \ middleware."
        "401":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 401
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Unauthorized. Authentication is required and has failed or
            has not yet been provided.
        "403":
          content:
            application/json:
              example:
                error:
                  message: Not authorized to make this request
                  type: NotAuthorizedException
                  code: 403
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: Forbidden. Authenticated user does not have the necessary permissions.
        "404":
          content:
            application/json:
              examples:
                ViewToRenameDoesNotExist:
                  $ref: '#/components/examples/NoSuchViewError'
                NamespaceToRenameToDoesNotExist:
                  $ref: '#/components/examples/NoSuchNamespaceError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: "Not Found - NoSuchViewException, view to rename does not exist\
            \ - NoSuchNamespaceException, The target namespace of the new identifier\
            \ does not exist"
        "406":
          content:
            application/json:
              example:
                error:
                  message: The server does not support this operation
                  type: UnsupportedOperationException
                  code: 406
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Not Acceptable / Unsupported Operation. The server does not
            support this operation.
        "409":
          content:
            application/json:
              example:
                $ref: '#/components/examples/ViewAlreadyExistsError'
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Conflict - The target identifier to rename to already exists
            as a table or view
        "419":
          content:
            application/json:
              example:
                error:
                  message: Credentials have timed out
                  type: AuthenticationTimeoutException
                  code: 419
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: "Credentials have timed out. If possible, the client should\
            \ refresh credentials and retry."
        "503":
          content:
            application/json:
              example:
                error:
                  message: Slow down
                  type: SlowDownException
                  code: 503
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: |-
            The service is not ready to handle the request. The client should wait and retry.

            The service may additionally send a Retry-After header to indicate when to retry.
        "5XX":
          content:
            application/json:
              example:
                error:
                  message: Internal Server Error
                  type: InternalServerError
                  code: 500
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
          description: A server-side problem that might not be addressable from the
            client side. Used for server 5xx errors without more specific documentation
            in individual routes.
      summary: Rename a view from its current name to a new name
      tags:
      - Catalog API
components:
  examples:
    ListTablesEmptyExample:
      summary: An empty list for a namespace with no tables
      value:
        identifiers: []
    ListNamespacesEmptyExample:
      summary: An empty list of namespaces
      value:
        namespaces: []
    ListNamespacesNonEmptyExample:
      summary: A non-empty list of namespaces
      value:
        namespaces:
        - - accounting
          - tax
        - - accounting
          - credits
    ListTablesNonEmptyExample:
      summary: A non-empty list of table identifiers
      value:
        identifiers:
        - namespace:
          - accounting
          - tax
          name: paid
        - namespace:
          - accounting
          - tax
          name: owed
    MultipartNamespaceAsPathVariable:
      summary: "A multi-part namespace, as represented in a path parameter"
      value: accounting%1Ftax
    NamespaceAsPathVariable:
      summary: "A single part namespace, as represented in a path paremeter"
      value: accounting
    NamespaceAlreadyExistsError:
      summary: The requested namespace already exists
      value:
        error:
          message: The given namespace already exists
          type: AlreadyExistsException
          code: 409
    NoSuchTableError:
      summary: The requested table does not exist
      value:
        error:
          message: The given table does not exist
          type: NoSuchTableException
          code: 404
    NoSuchViewError:
      summary: The requested view does not exist
      value:
        error:
          message: The given view does not exist
          type: NoSuchViewException
          code: 404
    NoSuchNamespaceError:
      summary: The requested namespace does not exist
      value:
        error:
          message: The given namespace does not exist
          type: NoSuchNamespaceException
          code: 404
    RenameTableSameNamespace:
      summary: Rename a table in the same namespace
      value:
        source:
          namespace:
          - accounting
          - tax
          name: paid
        destination:
          namespace:
          - accounting
          - tax
          name: owed
    RenameViewSameNamespace:
      summary: Rename a view in the same namespace
      value:
        source:
          namespace:
          - accounting
          - tax
          name: paid-view
        destination:
          namespace:
          - accounting
          - tax
          name: owed-view
    TableAlreadyExistsError:
      summary: The requested table identifier already exists
      value:
        error:
          message: The given table already exists
          type: AlreadyExistsException
          code: 409
    ViewAlreadyExistsError:
      summary: The requested view identifier already exists
      value:
        error:
          message: The given view already exists
          type: AlreadyExistsException
          code: 409
    UnprocessableEntityDuplicateKey:
      summary: The request body either has the same key multiple times in what should
        be a map with unique keys or the request body has keys in two or more fields
        which should be disjoint sets.
      value:
        error:
          message: The request cannot be processed as there is a key present multiple
            times
          type: UnprocessableEntityException
          code: 422
    UpdateAndRemoveNamespacePropertiesRequest:
      summary: An update namespace properties request with both properties to remove
        and properties to upsert.
      value:
        removals:
        - foo
        - bar
        updates:
          owner: Raoul
  parameters:
    namespace:
      description: A namespace identifier as a single string. Multipart namespace
        parts should be separated by the unit separator (`0x1F`) byte.
      examples:
        singlepart_namespace:
          value: accounting
        multipart_namespace:
          value: accounting%1Ftax
      explode: false
      in: path
      name: namespace
      required: true
      schema:
        type: string
      style: simple
    prefix:
      description: An optional prefix in the path
      explode: false
      in: path
      name: prefix
      required: true
      schema:
        type: string
      style: simple
    table:
      description: A table name
      example: sales
      explode: false
      in: path
      name: table
      required: true
      schema:
        type: string
      style: simple
    view:
      description: A view name
      example: sales
      explode: false
      in: path
      name: view
      required: true
      schema:
        type: string
      style: simple
    data-access:
      description: |
        Optional signal to the server that the client supports delegated access via a comma-separated list of access mechanisms.  The server may choose to supply access via any or none of the requested mechanisms.

        Specific properties and handling for `vended-credentials` is documented in the `LoadTableResult` schema section of this spec document.

        The protocol and specification for `remote-signing` is documented in  the `s3-signer-open-api.yaml` OpenApi spec in the `aws` module.
      example: "vended-credentials,remote-signing"
      explode: false
      in: header
      name: X-Iceberg-Access-Delegation
      required: false
      schema:
        enum:
        - vended-credentials
        - remote-signing
        type: string
      style: simple
    page-token:
      allowEmptyValue: true
      explode: true
      in: query
      name: pageToken
      required: false
      schema:
        $ref: '#/components/schemas/PageToken'
      style: form
    page-size:
      description: "For servers that support pagination, this signals an upper bound\
        \ of the number of results that a client will receive. For servers that do\
        \ not support pagination, clients may receive results larger than the indicated\
        \ `pageSize`."
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        minimum: 1
        type: integer
      style: form
  responses:
    OAuthTokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuthTokenResponse'
      description: OAuth2 token response for client credentials or token exchange
    OAuthErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuthError'
      description: OAuth2 error response
    BadRequestErrorResponse:
      content:
        application/json:
          example:
            error:
              message: Malformed request
              type: BadRequestException
              code: 400
          schema:
            $ref: '#/components/schemas/IcebergErrorResponse'
      description: "Indicates a bad request error. It could be caused by an unexpected\
        \ request body format or other forms of request validation failure, such as\
        \ invalid json. Usually serves application/json content, although in some\
        \ cases simple text/plain content might be returned by the server's middleware."
    UnauthorizedResponse:
      content:
        application/json:
          example:
            error:
              message: Not authorized to make this request
              type: NotAuthorizedException
              code: 401
          schema:
            $ref: '#/components/schemas/IcebergErrorResponse'
      description: Unauthorized. Authentication is required and has failed or has
        not yet been provided.
    ForbiddenResponse:
      content:
        application/json:
          example:
            error:
              message: Not authorized to make this request
              type: NotAuthorizedException
              code: 403
          schema:
            $ref: '#/components/schemas/IcebergErrorResponse'
      description: Forbidden. Authenticated user does not have the necessary permissions.
    UnsupportedOperationResponse:
      content:
        application/json:
          example:
            error:
              message: The server does not support this operation
              type: UnsupportedOperationException
              code: 406
          schema:
            $ref: '#/components/schemas/ErrorModel'
      description: Not Acceptable / Unsupported Operation. The server does not support
        this operation.
    IcebergErrorResponse:
      content:
        application/json:
          example:
            error:
              message: The server does not support this operation
              type: UnsupportedOperationException
              code: 406
          schema:
            $ref: '#/components/schemas/IcebergErrorResponse'
      description: JSON wrapper for all error responses (non-2xx)
    CreateNamespaceResponse:
      content:
        application/json:
          example:
            namespace:
            - accounting
            - tax
            properties:
              owner: Ralph
              created_at: "1452120468"
          schema:
            $ref: '#/components/schemas/CreateNamespaceResponse'
      description: "Represents a successful call to create a namespace. Returns the\
        \ namespace created, as well as any properties that were stored for the namespace,\
        \ including those the server might have added. Implementations are not required\
        \ to support namespace properties."
    GetNamespaceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetNamespaceResponse'
      description: "Returns a namespace, as well as any properties stored on the namespace\
        \ if namespace properties are supported by the server."
    ListTablesResponse:
      content:
        application/json:
          examples:
            ListTablesResponseNonEmpty:
              $ref: '#/components/examples/ListTablesNonEmptyExample'
            ListTablesResponseEmpty:
              $ref: '#/components/examples/ListTablesEmptyExample'
          schema:
            $ref: '#/components/schemas/ListTablesResponse'
      description: A list of table identifiers
    ListNamespacesResponse:
      content:
        application/json:
          examples:
            NonEmptyResponse:
              $ref: '#/components/examples/ListNamespacesNonEmptyExample'
            EmptyResponse:
              $ref: '#/components/examples/ListNamespacesEmptyExample'
          schema:
            $ref: '#/components/schemas/ListNamespacesResponse'
      description: A list of namespaces
    AuthenticationTimeoutResponse:
      content:
        application/json:
          example:
            error:
              message: Credentials have timed out
              type: AuthenticationTimeoutException
              code: 419
          schema:
            $ref: '#/components/schemas/IcebergErrorResponse'
      description: "Credentials have timed out. If possible, the client should refresh\
        \ credentials and retry."
    ServiceUnavailableResponse:
      content:
        application/json:
          example:
            error:
              message: Slow down
              type: SlowDownException
              code: 503
          schema:
            $ref: '#/components/schemas/IcebergErrorResponse'
      description: |-
        The service is not ready to handle the request. The client should wait and retry.

        The service may additionally send a Retry-After header to indicate when to retry.
    ServerErrorResponse:
      content:
        application/json:
          example:
            error:
              message: Internal Server Error
              type: InternalServerError
              code: 500
          schema:
            $ref: '#/components/schemas/IcebergErrorResponse'
      description: A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in individual
        routes.
    UpdateNamespacePropertiesResponse:
      content:
        application/json:
          example:
            updated:
            - owner
            removed:
            - foo
            missing:
            - bar
          schema:
            $ref: '#/components/schemas/UpdateNamespacePropertiesResponse'
      description: JSON data response for a synchronous update properties request.
    CreateTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadTableResult'
      description: Table metadata result after creating a table
    LoadTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadTableResult'
      description: Table metadata result when loading a table
    LoadViewResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadViewResult'
      description: View metadata result when loading a view
    CommitTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommitTableResponse'
      description: |-
        Response used when a table is successfully updated.
        The table metadata JSON is returned in the metadata field. The corresponding file location of table metadata must be returned in the metadata-location field. Clients can check whether metadata has changed by comparing metadata locations.
  schemas:
    ErrorModel:
      description: JSON error payload returned in a response with further details
        on the error
      properties:
        message:
          description: Human-readable error message
          type: string
        type:
          description: Internal type definition of the error
          example: NoSuchNamespaceException
          type: string
        code:
          description: HTTP response code
          example: 404
          maximum: 600
          minimum: 400
          type: integer
        stack:
          items:
            type: string
          type: array
      required:
      - code
      - message
      - type
      type: object
    CatalogConfig:
      description: Server-provided configuration for the catalog.
      example:
        defaults:
          key: defaults
        overrides:
          key: overrides
      properties:
        overrides:
          additionalProperties:
            type: string
          description: Properties that should be used to override client configuration;
            applied after defaults and client configuration.
          type: object
        defaults:
          additionalProperties:
            type: string
          description: Properties that should be used as default configuration; applied
            before client configuration.
          type: object
      required:
      - defaults
      - overrides
      type: object
    CreateNamespaceRequest:
      example:
        namespace:
        - accounting
        - tax
        properties:
          owner: Hank Bendickson
      properties:
        namespace:
          description: Reference to one or more levels of a namespace
          example:
          - accounting
          - tax
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          default: {}
          description: Configured string to string map of properties for the namespace
          example:
            owner: Hank Bendickson
          type: object
      required:
      - namespace
      type: object
    UpdateNamespacePropertiesRequest:
      example:
        removals:
        - department
        - access_group
        updates:
          owner: Hank Bendickson
      properties:
        removals:
          example:
          - department
          - access_group
          items:
            type: string
          type: array
          uniqueItems: true
        updates:
          additionalProperties:
            type: string
          example:
            owner: Hank Bendickson
          type: object
      type: object
    RenameTableRequest:
      example:
        destination:
          namespace:
          - accounting
          - tax
          name: name
        source:
          namespace:
          - accounting
          - tax
          name: name
      properties:
        source:
          $ref: '#/components/schemas/TableIdentifier'
        destination:
          $ref: '#/components/schemas/TableIdentifier'
      required:
      - destination
      - source
      type: object
    Namespace:
      description: Reference to one or more levels of a namespace
      example:
      - accounting
      - tax
      items:
        type: string
      type: array
    PageToken:
      description: |-
        An opaque token that allows clients to make use of pagination for list APIs (e.g. ListTables). Clients may initiate the first paginated request by sending an empty query parameter `pageToken` to the server.
        Servers that support pagination should identify the `pageToken` parameter and return a `next-page-token` in the response if there are more results available.  After the initial request, the value of `next-page-token` from each response must be used as the `pageToken` parameter value for the next request. The server must return `null` value for the `next-page-token` in the last response.
        Servers that support pagination must return all results in a single response with the value of `next-page-token` set to `null` if the query parameter `pageToken` is not set in the request.
        Servers that do not support pagination should ignore the `pageToken` parameter and return all results in a single response. The `next-page-token` must be omitted from the response.
        Clients must interpret either `null` or missing response value of `next-page-token` as the end of the listing results.
      nullable: true
      type: string
    TableIdentifier:
      example:
        namespace:
        - accounting
        - tax
        name: name
      properties:
        namespace:
          description: Reference to one or more levels of a namespace
          example:
          - accounting
          - tax
          items:
            type: string
          type: array
        name:
          nullable: false
          type: string
      required:
      - name
      - namespace
      type: object
    PrimitiveType:
      example: "[\"long\",\"string\",\"fixed[16]\",\"decimal(10,2)\"]"
      type: string
    StructField:
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/Type'
        required:
          type: boolean
        doc:
          type: string
      required:
      - id
      - name
      - required
      - type
      type: object
    StructType:
      properties:
        type:
          enum:
          - struct
          type: string
        fields:
          items:
            $ref: '#/components/schemas/StructField'
          type: array
      required:
      - fields
      - type
      type: object
    ListType:
      properties:
        type:
          enum:
          - list
          type: string
        element-id:
          type: integer
        element:
          $ref: '#/components/schemas/Type'
        element-required:
          type: boolean
      required:
      - element
      - element-id
      - element-required
      - type
      type: object
    MapType:
      properties:
        type:
          enum:
          - map
          type: string
        key-id:
          type: integer
        key:
          $ref: '#/components/schemas/Type'
        value-id:
          type: integer
        value:
          $ref: '#/components/schemas/Type'
        value-required:
          type: boolean
      required:
      - key
      - key-id
      - type
      - value
      - value-id
      - value-required
      type: object
    Type:
      oneOf:
      - $ref: '#/components/schemas/PrimitiveType'
      - $ref: '#/components/schemas/StructType'
      - $ref: '#/components/schemas/ListType'
      - $ref: '#/components/schemas/MapType'
    Schema:
      allOf:
      - $ref: '#/components/schemas/StructType'
      - properties:
          schema-id:
            readOnly: true
            type: integer
          identifier-field-ids:
            items:
              type: integer
            type: array
        type: object
    Expression:
      oneOf:
      - $ref: '#/components/schemas/AndOrExpression'
      - $ref: '#/components/schemas/NotExpression'
      - $ref: '#/components/schemas/SetExpression'
      - $ref: '#/components/schemas/LiteralExpression'
      - $ref: '#/components/schemas/UnaryExpression'
    ExpressionType:
      example: "[\"eq\",\"and\",\"or\",\"not\",\"in\",\"not-in\",\"lt\",\"lt-eq\"\
        ,\"gt\",\"gt-eq\",\"not-eq\",\"starts-with\",\"not-starts-with\",\"is-null\"\
        ,\"not-null\",\"is-nan\",\"not-nan\"]"
      type: string
    AndOrExpression:
      properties:
        type:
          example: "[\"eq\",\"and\",\"or\",\"not\",\"in\",\"not-in\",\"lt\",\"lt-eq\"\
            ,\"gt\",\"gt-eq\",\"not-eq\",\"starts-with\",\"not-starts-with\",\"is-null\"\
            ,\"not-null\",\"is-nan\",\"not-nan\"]"
          type: string
        left:
          $ref: '#/components/schemas/Expression'
        right:
          $ref: '#/components/schemas/Expression'
      required:
      - left
      - right
      - type
      type: object
    NotExpression:
      properties:
        type:
          example: "[\"eq\",\"and\",\"or\",\"not\",\"in\",\"not-in\",\"lt\",\"lt-eq\"\
            ,\"gt\",\"gt-eq\",\"not-eq\",\"starts-with\",\"not-starts-with\",\"is-null\"\
            ,\"not-null\",\"is-nan\",\"not-nan\"]"
          type: string
        child:
          $ref: '#/components/schemas/Expression'
      required:
      - child
      - type
      type: object
    UnaryExpression:
      properties:
        type:
          example: "[\"eq\",\"and\",\"or\",\"not\",\"in\",\"not-in\",\"lt\",\"lt-eq\"\
            ,\"gt\",\"gt-eq\",\"not-eq\",\"starts-with\",\"not-starts-with\",\"is-null\"\
            ,\"not-null\",\"is-nan\",\"not-nan\"]"
          type: string
        term:
          $ref: '#/components/schemas/Term'
        value:
          type: object
      required:
      - term
      - type
      - value
      type: object
    LiteralExpression:
      properties:
        type:
          example: "[\"eq\",\"and\",\"or\",\"not\",\"in\",\"not-in\",\"lt\",\"lt-eq\"\
            ,\"gt\",\"gt-eq\",\"not-eq\",\"starts-with\",\"not-starts-with\",\"is-null\"\
            ,\"not-null\",\"is-nan\",\"not-nan\"]"
          type: string
        term:
          $ref: '#/components/schemas/Term'
        value:
          type: object
      required:
      - term
      - type
      - value
      type: object
    SetExpression:
      properties:
        type:
          example: "[\"eq\",\"and\",\"or\",\"not\",\"in\",\"not-in\",\"lt\",\"lt-eq\"\
            ,\"gt\",\"gt-eq\",\"not-eq\",\"starts-with\",\"not-starts-with\",\"is-null\"\
            ,\"not-null\",\"is-nan\",\"not-nan\"]"
          type: string
        term:
          $ref: '#/components/schemas/Term'
        values:
          items:
            type: object
          type: array
      required:
      - term
      - type
      - values
      type: object
    Term:
      oneOf:
      - $ref: '#/components/schemas/Reference'
      - $ref: '#/components/schemas/TransformTerm'
    Reference:
      example: "[\"column-name\"]"
      type: string
    TransformTerm:
      properties:
        type:
          enum:
          - transform
          type: string
        transform:
          example: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
            ,\"truncate[16]\"]"
          type: string
        term:
          example: "[\"column-name\"]"
          type: string
      required:
      - term
      - transform
      - type
      type: object
    Transform:
      example: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
        ,\"truncate[16]\"]"
      type: string
    PartitionField:
      example:
        field-id: 2
        transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
          ,\"truncate[16]\"]"
        name: name
        source-id: 7
      properties:
        field-id:
          type: integer
        source-id:
          type: integer
        name:
          type: string
        transform:
          example: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
            ,\"truncate[16]\"]"
          type: string
      required:
      - name
      - source-id
      - transform
      type: object
    PartitionSpec:
      example:
        spec-id: 5
        fields:
        - field-id: 2
          transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
            ,\"truncate[16]\"]"
          name: name
          source-id: 7
        - field-id: 2
          transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
            ,\"truncate[16]\"]"
          name: name
          source-id: 7
      properties:
        spec-id:
          readOnly: true
          type: integer
        fields:
          items:
            $ref: '#/components/schemas/PartitionField'
          type: array
      required:
      - fields
      type: object
    SortDirection:
      enum:
      - asc
      - desc
      type: string
    NullOrder:
      enum:
      - nulls-first
      - nulls-last
      type: string
    SortField:
      example:
        transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
          ,\"truncate[16]\"]"
        null-order: null
        source-id: 4
        direction: null
      properties:
        source-id:
          type: integer
        transform:
          example: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
            ,\"truncate[16]\"]"
          type: string
        direction:
          $ref: '#/components/schemas/SortDirection'
        null-order:
          $ref: '#/components/schemas/NullOrder'
      required:
      - direction
      - null-order
      - source-id
      - transform
      type: object
    SortOrder:
      example:
        order-id: 2
        fields:
        - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
            ,\"truncate[16]\"]"
          null-order: null
          source-id: 4
          direction: null
        - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
            ,\"truncate[16]\"]"
          null-order: null
          source-id: 4
          direction: null
      properties:
        order-id:
          readOnly: true
          type: integer
        fields:
          items:
            $ref: '#/components/schemas/SortField'
          type: array
      required:
      - fields
      - order-id
      type: object
    Snapshot:
      example:
        summary:
          operation: append
        snapshot-id: 1
        schema-id: 7
        manifest-list: manifest-list
        timestamp-ms: 6
        sequence-number: 1
        parent-snapshot-id: 1
      properties:
        snapshot-id:
          format: int64
          type: integer
        parent-snapshot-id:
          format: int64
          type: integer
        sequence-number:
          format: int64
          type: integer
        timestamp-ms:
          format: int64
          type: integer
        manifest-list:
          description: Location of the snapshot's manifest list file
          type: string
        summary:
          $ref: '#/components/schemas/Snapshot_summary'
        schema-id:
          type: integer
      required:
      - manifest-list
      - snapshot-id
      - summary
      - timestamp-ms
      type: object
    SnapshotReference:
      example:
        max-snapshot-age-ms: 5
        snapshot-id: 1
        max-ref-age-ms: 4
        min-snapshots-to-keep: 9
        type: tag
      properties:
        type:
          enum:
          - tag
          - branch
          type: string
        snapshot-id:
          format: int64
          type: integer
        max-ref-age-ms:
          format: int64
          type: integer
        max-snapshot-age-ms:
          format: int64
          type: integer
        min-snapshots-to-keep:
          type: integer
      required:
      - snapshot-id
      - type
      type: object
    SnapshotReferences:
      additionalProperties:
        $ref: '#/components/schemas/SnapshotReference'
      type: object
    SnapshotLog:
      items:
        $ref: '#/components/schemas/SnapshotLog_inner'
      type: array
    MetadataLog:
      items:
        $ref: '#/components/schemas/MetadataLog_inner'
      type: array
    TableMetadata:
      example:
        metadata-log:
        - timestamp-ms: 6
          metadata-file: metadata-file
        - timestamp-ms: 6
          metadata-file: metadata-file
        current-snapshot-id: 9
        last-updated-ms: 6
        last-sequence-number: 6
        format-version: 1
        statistics-files:
        - file-size-in-bytes: 6
          snapshot-id: 3
          blob-metadata:
          - snapshot-id: 2
            sequence-number: 6
            type: type
            fields:
            - 6
            - 6
            properties: "{}"
          - snapshot-id: 2
            sequence-number: 6
            type: type
            fields:
            - 6
            - 6
            properties: "{}"
          statistics-path: statistics-path
          file-footer-size-in-bytes: 1
        - file-size-in-bytes: 6
          snapshot-id: 3
          blob-metadata:
          - snapshot-id: 2
            sequence-number: 6
            type: type
            fields:
            - 6
            - 6
            properties: "{}"
          - snapshot-id: 2
            sequence-number: 6
            type: type
            fields:
            - 6
            - 6
            properties: "{}"
          statistics-path: statistics-path
          file-footer-size-in-bytes: 1
        table-uuid: table-uuid
        default-sort-order-id: 7
        snapshots:
        - summary:
            operation: append
          snapshot-id: 1
          schema-id: 7
          manifest-list: manifest-list
          timestamp-ms: 6
          sequence-number: 1
          parent-snapshot-id: 1
        - summary:
            operation: append
          snapshot-id: 1
          schema-id: 7
          manifest-list: manifest-list
          timestamp-ms: 6
          sequence-number: 1
          parent-snapshot-id: 1
        last-partition-id: 3
        snapshot-log:
        - snapshot-id: 8
          timestamp-ms: 9
        - snapshot-id: 8
          timestamp-ms: 9
        refs:
          key:
            max-snapshot-age-ms: 5
            snapshot-id: 1
            max-ref-age-ms: 4
            min-snapshots-to-keep: 9
            type: tag
        current-schema-id: 1
        schemas:
        - null
        - null
        partition-statistics-files:
        - file-size-in-bytes: 6
          snapshot-id: 5
          statistics-path: statistics-path
        - file-size-in-bytes: 6
          snapshot-id: 5
          statistics-path: statistics-path
        sort-orders:
        - order-id: 2
          fields:
          - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            null-order: null
            source-id: 4
            direction: null
          - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            null-order: null
            source-id: 4
            direction: null
        - order-id: 2
          fields:
          - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            null-order: null
            source-id: 4
            direction: null
          - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            null-order: null
            source-id: 4
            direction: null
        location: location
        last-column-id: 5
        default-spec-id: 9
        partition-specs:
        - spec-id: 5
          fields:
          - field-id: 2
            transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            name: name
            source-id: 7
          - field-id: 2
            transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            name: name
            source-id: 7
        - spec-id: 5
          fields:
          - field-id: 2
            transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            name: name
            source-id: 7
          - field-id: 2
            transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            name: name
            source-id: 7
        properties:
          key: properties
      properties:
        format-version:
          maximum: 2
          minimum: 1
          type: integer
        table-uuid:
          type: string
        location:
          type: string
        last-updated-ms:
          format: int64
          type: integer
        properties:
          additionalProperties:
            type: string
          type: object
        schemas:
          items:
            $ref: '#/components/schemas/Schema'
          type: array
        current-schema-id:
          type: integer
        last-column-id:
          type: integer
        partition-specs:
          items:
            $ref: '#/components/schemas/PartitionSpec'
          type: array
        default-spec-id:
          type: integer
        last-partition-id:
          type: integer
        sort-orders:
          items:
            $ref: '#/components/schemas/SortOrder'
          type: array
        default-sort-order-id:
          type: integer
        snapshots:
          items:
            $ref: '#/components/schemas/Snapshot'
          type: array
        refs:
          additionalProperties:
            $ref: '#/components/schemas/SnapshotReference'
          type: object
        current-snapshot-id:
          format: int64
          type: integer
        last-sequence-number:
          format: int64
          type: integer
        snapshot-log:
          items:
            $ref: '#/components/schemas/SnapshotLog_inner'
          type: array
        metadata-log:
          items:
            $ref: '#/components/schemas/MetadataLog_inner'
          type: array
        statistics-files:
          items:
            $ref: '#/components/schemas/StatisticsFile'
          type: array
        partition-statistics-files:
          items:
            $ref: '#/components/schemas/PartitionStatisticsFile'
          type: array
      required:
      - format-version
      - table-uuid
      type: object
    SQLViewRepresentation:
      properties:
        type:
          type: string
        sql:
          type: string
        dialect:
          type: string
      required:
      - dialect
      - sql
      - type
      type: object
    ViewRepresentation:
      oneOf:
      - $ref: '#/components/schemas/SQLViewRepresentation'
    ViewHistoryEntry:
      example:
        version-id: 2
        timestamp-ms: 7
      properties:
        version-id:
          type: integer
        timestamp-ms:
          format: int64
          type: integer
      required:
      - timestamp-ms
      - version-id
      type: object
    ViewVersion:
      example:
        summary:
          key: summary
        default-namespace:
        - accounting
        - tax
        schema-id: 5
        version-id: 1
        timestamp-ms: 5
        representations:
        - null
        - null
        default-catalog: default-catalog
      properties:
        version-id:
          type: integer
        timestamp-ms:
          format: int64
          type: integer
        schema-id:
          description: "Schema ID to set as current, or -1 to set last added schema"
          type: integer
        summary:
          additionalProperties:
            type: string
          type: object
        representations:
          items:
            $ref: '#/components/schemas/ViewRepresentation'
          type: array
        default-catalog:
          type: string
        default-namespace:
          description: Reference to one or more levels of a namespace
          example:
          - accounting
          - tax
          items:
            type: string
          type: array
      required:
      - default-namespace
      - representations
      - schema-id
      - summary
      - timestamp-ms
      - version-id
      type: object
    ViewMetadata:
      example:
        versions:
        - summary:
            key: summary
          default-namespace:
          - accounting
          - tax
          schema-id: 5
          version-id: 1
          timestamp-ms: 5
          representations:
          - null
          - null
          default-catalog: default-catalog
        - summary:
            key: summary
          default-namespace:
          - accounting
          - tax
          schema-id: 5
          version-id: 1
          timestamp-ms: 5
          representations:
          - null
          - null
          default-catalog: default-catalog
        schemas:
        - null
        - null
        format-version: 1
        location: location
        current-version-id: 6
        view-uuid: view-uuid
        version-log:
        - version-id: 2
          timestamp-ms: 7
        - version-id: 2
          timestamp-ms: 7
        properties:
          key: properties
      properties:
        view-uuid:
          type: string
        format-version:
          maximum: 1
          minimum: 1
          type: integer
        location:
          type: string
        current-version-id:
          type: integer
        versions:
          items:
            $ref: '#/components/schemas/ViewVersion'
          type: array
        version-log:
          items:
            $ref: '#/components/schemas/ViewHistoryEntry'
          type: array
        schemas:
          items:
            $ref: '#/components/schemas/Schema'
          type: array
        properties:
          additionalProperties:
            type: string
          type: object
      required:
      - current-version-id
      - format-version
      - location
      - schemas
      - version-log
      - versions
      - view-uuid
      type: object
    BaseUpdate:
      discriminator:
        mapping:
          assign-uuid: '#/components/schemas/AssignUUIDUpdate'
          upgrade-format-version: '#/components/schemas/UpgradeFormatVersionUpdate'
          add-schema: '#/components/schemas/AddSchemaUpdate'
          set-current-schema: '#/components/schemas/SetCurrentSchemaUpdate'
          add-spec: '#/components/schemas/AddPartitionSpecUpdate'
          set-default-spec: '#/components/schemas/SetDefaultSpecUpdate'
          add-sort-order: '#/components/schemas/AddSortOrderUpdate'
          set-default-sort-order: '#/components/schemas/SetDefaultSortOrderUpdate'
          add-snapshot: '#/components/schemas/AddSnapshotUpdate'
          set-snapshot-ref: '#/components/schemas/SetSnapshotRefUpdate'
          remove-snapshots: '#/components/schemas/RemoveSnapshotsUpdate'
          remove-snapshot-ref: '#/components/schemas/RemoveSnapshotRefUpdate'
          set-location: '#/components/schemas/SetLocationUpdate'
          set-properties: '#/components/schemas/SetPropertiesUpdate'
          remove-properties: '#/components/schemas/RemovePropertiesUpdate'
          add-view-version: '#/components/schemas/AddViewVersionUpdate'
          set-current-view-version: '#/components/schemas/SetCurrentViewVersionUpdate'
          set-statistics: '#/components/schemas/SetStatisticsUpdate'
          remove-statistics: '#/components/schemas/RemoveStatisticsUpdate'
          set-partition-statistics: '#/components/schemas/SetPartitionStatisticsUpdate'
          remove-partition-statistics: '#/components/schemas/RemovePartitionStatisticsUpdate'
        propertyName: action
      properties:
        action:
          type: string
      required:
      - action
      type: object
    AssignUUIDUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      description: Assigning a UUID to a table/view should only be done when creating
        the table/view. It is not safe to re-assign the UUID if a table/view already
        has a UUID assigned
      properties:
        action:
          enum:
          - assign-uuid
          type: string
        uuid:
          type: string
      required:
      - action
      - uuid
    UpgradeFormatVersionUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - upgrade-format-version
          type: string
        format-version:
          type: integer
      required:
      - action
      - format-version
    AddSchemaUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - add-schema
          type: string
        schema:
          $ref: '#/components/schemas/Schema'
        last-column-id:
          description: "The highest assigned column ID for the table. This is used\
            \ to ensure columns are always assigned an unused ID when evolving schemas.\
            \ When omitted, it will be computed on the server side."
          type: integer
      required:
      - action
      - schema
    SetCurrentSchemaUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-current-schema
          type: string
        schema-id:
          description: "Schema ID to set as current, or -1 to set last added schema"
          type: integer
      required:
      - action
      - schema-id
    AddPartitionSpecUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - add-spec
          type: string
        spec:
          $ref: '#/components/schemas/PartitionSpec'
      required:
      - action
      - spec
    SetDefaultSpecUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-default-spec
          type: string
        spec-id:
          description: "Partition spec ID to set as the default, or -1 to set last\
            \ added spec"
          type: integer
      required:
      - action
      - spec-id
    AddSortOrderUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - add-sort-order
          type: string
        sort-order:
          $ref: '#/components/schemas/SortOrder'
      required:
      - action
      - sort-order
    SetDefaultSortOrderUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-default-sort-order
          type: string
        sort-order-id:
          description: "Sort order ID to set as the default, or -1 to set last added\
            \ sort order"
          type: integer
      required:
      - action
      - sort-order-id
    AddSnapshotUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - add-snapshot
          type: string
        snapshot:
          $ref: '#/components/schemas/Snapshot'
      required:
      - action
      - snapshot
    SetSnapshotRefUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      - $ref: '#/components/schemas/SnapshotReference'
      properties:
        action:
          enum:
          - set-snapshot-ref
          type: string
        ref-name:
          type: string
      required:
      - action
      - ref-name
    RemoveSnapshotsUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - remove-snapshots
          type: string
        snapshot-ids:
          items:
            format: int64
            type: integer
          type: array
      required:
      - action
      - snapshot-ids
    RemoveSnapshotRefUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - remove-snapshot-ref
          type: string
        ref-name:
          type: string
      required:
      - action
      - ref-name
    SetLocationUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-location
          type: string
        location:
          type: string
      required:
      - action
      - location
    SetPropertiesUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-properties
          type: string
        updates:
          additionalProperties:
            type: string
          type: object
      required:
      - action
      - updates
    RemovePropertiesUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - remove-properties
          type: string
        removals:
          items:
            type: string
          type: array
      required:
      - action
      - removals
    AddViewVersionUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - add-view-version
          type: string
        view-version:
          $ref: '#/components/schemas/ViewVersion'
      required:
      - action
      - view-version
    SetCurrentViewVersionUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-current-view-version
          type: string
        view-version-id:
          description: "The view version id to set as current, or -1 to set last added\
            \ view version id"
          type: integer
      required:
      - action
      - view-version-id
    SetStatisticsUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-statistics
          type: string
        snapshot-id:
          format: int64
          type: integer
        statistics:
          $ref: '#/components/schemas/StatisticsFile'
      required:
      - action
      - snapshot-id
      - statistics
    RemoveStatisticsUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - remove-statistics
          type: string
        snapshot-id:
          format: int64
          type: integer
      required:
      - action
      - snapshot-id
    SetPartitionStatisticsUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - set-partition-statistics
          type: string
        partition-statistics:
          $ref: '#/components/schemas/PartitionStatisticsFile'
      required:
      - action
      - partition-statistics
    RemovePartitionStatisticsUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseUpdate'
      properties:
        action:
          enum:
          - remove-partition-statistics
          type: string
        snapshot-id:
          format: int64
          type: integer
      required:
      - action
      - snapshot-id
    TableUpdate:
      anyOf:
      - $ref: '#/components/schemas/AssignUUIDUpdate'
      - $ref: '#/components/schemas/UpgradeFormatVersionUpdate'
      - $ref: '#/components/schemas/AddSchemaUpdate'
      - $ref: '#/components/schemas/SetCurrentSchemaUpdate'
      - $ref: '#/components/schemas/AddPartitionSpecUpdate'
      - $ref: '#/components/schemas/SetDefaultSpecUpdate'
      - $ref: '#/components/schemas/AddSortOrderUpdate'
      - $ref: '#/components/schemas/SetDefaultSortOrderUpdate'
      - $ref: '#/components/schemas/AddSnapshotUpdate'
      - $ref: '#/components/schemas/SetSnapshotRefUpdate'
      - $ref: '#/components/schemas/RemoveSnapshotsUpdate'
      - $ref: '#/components/schemas/RemoveSnapshotRefUpdate'
      - $ref: '#/components/schemas/SetLocationUpdate'
      - $ref: '#/components/schemas/SetPropertiesUpdate'
      - $ref: '#/components/schemas/RemovePropertiesUpdate'
      - $ref: '#/components/schemas/SetStatisticsUpdate'
      - $ref: '#/components/schemas/RemoveStatisticsUpdate'
    ViewUpdate:
      anyOf:
      - $ref: '#/components/schemas/AssignUUIDUpdate'
      - $ref: '#/components/schemas/UpgradeFormatVersionUpdate'
      - $ref: '#/components/schemas/AddSchemaUpdate'
      - $ref: '#/components/schemas/SetLocationUpdate'
      - $ref: '#/components/schemas/SetPropertiesUpdate'
      - $ref: '#/components/schemas/RemovePropertiesUpdate'
      - $ref: '#/components/schemas/AddViewVersionUpdate'
      - $ref: '#/components/schemas/SetCurrentViewVersionUpdate'
    TableRequirement:
      discriminator:
        mapping:
          assert-create: '#/components/schemas/AssertCreate'
          assert-table-uuid: '#/components/schemas/AssertTableUUID'
          assert-ref-snapshot-id: '#/components/schemas/AssertRefSnapshotId'
          assert-last-assigned-field-id: '#/components/schemas/AssertLastAssignedFieldId'
          assert-current-schema-id: '#/components/schemas/AssertCurrentSchemaId'
          assert-last-assigned-partition-id: '#/components/schemas/AssertLastAssignedPartitionId'
          assert-default-spec-id: '#/components/schemas/AssertDefaultSpecId'
          assert-default-sort-order-id: '#/components/schemas/AssertDefaultSortOrderId'
        propertyName: type
      example:
        type: type
      properties:
        type:
          type: string
      required:
      - type
      type: object
    AssertCreate:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: The table must not already exist; used for create transactions
      properties:
        type:
          enum:
          - assert-create
          type: string
      required:
      - type
      type: object
    AssertTableUUID:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: The table UUID must match the requirement's `uuid`
      properties:
        type:
          enum:
          - assert-table-uuid
          type: string
        uuid:
          type: string
      required:
      - type
      - uuid
    AssertRefSnapshotId:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: "The table branch or tag identified by the requirement's `ref`\
        \ must reference the requirement's `snapshot-id`; if `snapshot-id` is `null`\
        \ or missing, the ref must not already exist"
      properties:
        type:
          enum:
          - assert-ref-snapshot-id
          type: string
        ref:
          type: string
        snapshot-id:
          format: int64
          type: integer
      required:
      - ref
      - snapshot-id
      - type
    AssertLastAssignedFieldId:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: The table's last assigned column id must match the requirement's
        `last-assigned-field-id`
      properties:
        type:
          enum:
          - assert-last-assigned-field-id
          type: string
        last-assigned-field-id:
          type: integer
      required:
      - last-assigned-field-id
      - type
    AssertCurrentSchemaId:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: The table's current schema id must match the requirement's `current-schema-id`
      properties:
        type:
          enum:
          - assert-current-schema-id
          type: string
        current-schema-id:
          type: integer
      required:
      - current-schema-id
      - type
    AssertLastAssignedPartitionId:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: The table's last assigned partition id must match the requirement's
        `last-assigned-partition-id`
      properties:
        type:
          enum:
          - assert-last-assigned-partition-id
          type: string
        last-assigned-partition-id:
          type: integer
      required:
      - last-assigned-partition-id
      - type
    AssertDefaultSpecId:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: The table's default spec id must match the requirement's `default-spec-id`
      properties:
        type:
          enum:
          - assert-default-spec-id
          type: string
        default-spec-id:
          type: integer
      required:
      - default-spec-id
      - type
    AssertDefaultSortOrderId:
      allOf:
      - $ref: '#/components/schemas/TableRequirement'
      description: The table's default sort order id must match the requirement's
        `default-sort-order-id`
      properties:
        type:
          enum:
          - assert-default-sort-order-id
          type: string
        default-sort-order-id:
          type: integer
      required:
      - default-sort-order-id
      - type
    ViewRequirement:
      discriminator:
        mapping:
          assert-view-uuid: '#/components/schemas/AssertViewUUID'
        propertyName: type
      example:
        type: type
      properties:
        type:
          type: string
      required:
      - type
      type: object
    AssertViewUUID:
      allOf:
      - $ref: '#/components/schemas/ViewRequirement'
      description: The view UUID must match the requirement's `uuid`
      properties:
        type:
          enum:
          - assert-view-uuid
          type: string
        uuid:
          type: string
      required:
      - type
      - uuid
    LoadTableResult:
      description: "Result used when a table is successfully loaded.\n\n\nThe table\
        \ metadata JSON is returned in the `metadata` field. The corresponding file\
        \ location of table metadata should be returned in the `metadata-location`\
        \ field, unless the metadata is not yet committed. For example, a create transaction\
        \ may return metadata that is staged but not committed.\nClients can check\
        \ whether metadata has changed by comparing metadata locations after the table\
        \ has been created.\n\n\nThe `config` map returns table-specific configuration\
        \ for the table's resources, including its HTTP client and FileIO. For example,\
        \ config may contain a specific FileIO implementation class for the table\
        \ depending on its underlying storage.\n\n\nThe following configurations should\
        \ be respected by clients:\n\n## General Configurations\n\n- `token`: Authorization\
        \ bearer token to use for table requests if OAuth2 security is enabled \n\n\
        ## AWS Configurations\n\nThe following configurations should be respected\
        \ when working with tables stored in AWS S3\n - `client.region`: region to\
        \ configure client for making requests to AWS\n - `s3.access-key-id`: id for\
        \ for credentials that provide access to the data in S3\n - `s3.secret-access-key`:\
        \ secret for credentials that provide access to data in S3 \n - `s3.session-token`:\
        \ if present, this value should be used for as the session token \n - `s3.remote-signing-enabled`:\
        \ if `true` remote signing should be performed as described in the `s3-signer-open-api.yaml`\
        \ specification\n"
      example:
        metadata:
          metadata-log:
          - timestamp-ms: 6
            metadata-file: metadata-file
          - timestamp-ms: 6
            metadata-file: metadata-file
          current-snapshot-id: 9
          last-updated-ms: 6
          last-sequence-number: 6
          format-version: 1
          statistics-files:
          - file-size-in-bytes: 6
            snapshot-id: 3
            blob-metadata:
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            statistics-path: statistics-path
            file-footer-size-in-bytes: 1
          - file-size-in-bytes: 6
            snapshot-id: 3
            blob-metadata:
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            statistics-path: statistics-path
            file-footer-size-in-bytes: 1
          table-uuid: table-uuid
          default-sort-order-id: 7
          snapshots:
          - summary:
              operation: append
            snapshot-id: 1
            schema-id: 7
            manifest-list: manifest-list
            timestamp-ms: 6
            sequence-number: 1
            parent-snapshot-id: 1
          - summary:
              operation: append
            snapshot-id: 1
            schema-id: 7
            manifest-list: manifest-list
            timestamp-ms: 6
            sequence-number: 1
            parent-snapshot-id: 1
          last-partition-id: 3
          snapshot-log:
          - snapshot-id: 8
            timestamp-ms: 9
          - snapshot-id: 8
            timestamp-ms: 9
          refs:
            key:
              max-snapshot-age-ms: 5
              snapshot-id: 1
              max-ref-age-ms: 4
              min-snapshots-to-keep: 9
              type: tag
          current-schema-id: 1
          schemas:
          - null
          - null
          partition-statistics-files:
          - file-size-in-bytes: 6
            snapshot-id: 5
            statistics-path: statistics-path
          - file-size-in-bytes: 6
            snapshot-id: 5
            statistics-path: statistics-path
          sort-orders:
          - order-id: 2
            fields:
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
          - order-id: 2
            fields:
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
          location: location
          last-column-id: 5
          default-spec-id: 9
          partition-specs:
          - spec-id: 5
            fields:
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
          - spec-id: 5
            fields:
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
          properties:
            key: properties
        metadata-location: metadata-location
        config:
          key: config
      properties:
        metadata-location:
          description: May be null if the table is staged as part of a transaction
          type: string
        metadata:
          $ref: '#/components/schemas/TableMetadata'
        config:
          additionalProperties:
            type: string
          type: object
      required:
      - metadata
      type: object
    CommitTableRequest:
      example:
        identifier:
          namespace:
          - accounting
          - tax
          name: name
        requirements:
        - type: type
        - type: type
        updates:
        - null
        - null
      properties:
        identifier:
          $ref: '#/components/schemas/TableIdentifier'
        requirements:
          items:
            $ref: '#/components/schemas/TableRequirement'
          type: array
        updates:
          items:
            $ref: '#/components/schemas/TableUpdate'
          type: array
      required:
      - requirements
      - updates
      type: object
    CommitViewRequest:
      example:
        identifier:
          namespace:
          - accounting
          - tax
          name: name
        requirements:
        - type: type
        - type: type
        updates:
        - null
        - null
      properties:
        identifier:
          $ref: '#/components/schemas/TableIdentifier'
        requirements:
          items:
            $ref: '#/components/schemas/ViewRequirement'
          type: array
        updates:
          items:
            $ref: '#/components/schemas/ViewUpdate'
          type: array
      required:
      - updates
      type: object
    CommitTransactionRequest:
      example:
        table-changes:
        - identifier:
            namespace:
            - accounting
            - tax
            name: name
          requirements:
          - type: type
          - type: type
          updates:
          - null
          - null
        - identifier:
            namespace:
            - accounting
            - tax
            name: name
          requirements:
          - type: type
          - type: type
          updates:
          - null
          - null
      properties:
        table-changes:
          items:
            $ref: '#/components/schemas/CommitTableRequest'
          type: array
      required:
      - table-changes
      type: object
    CreateTableRequest:
      example:
        schema: null
        stage-create: true
        name: name
        location: location
        partition-spec:
          spec-id: 5
          fields:
          - field-id: 2
            transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            name: name
            source-id: 7
          - field-id: 2
            transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            name: name
            source-id: 7
        write-order:
          order-id: 2
          fields:
          - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            null-order: null
            source-id: 4
            direction: null
          - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
              ,\"truncate[16]\"]"
            null-order: null
            source-id: 4
            direction: null
        properties:
          key: properties
      properties:
        name:
          type: string
        location:
          type: string
        schema:
          $ref: '#/components/schemas/Schema'
        partition-spec:
          $ref: '#/components/schemas/PartitionSpec'
        write-order:
          $ref: '#/components/schemas/SortOrder'
        stage-create:
          type: boolean
        properties:
          additionalProperties:
            type: string
          type: object
      required:
      - name
      - schema
      type: object
    RegisterTableRequest:
      example:
        name: name
        metadata-location: metadata-location
      properties:
        name:
          type: string
        metadata-location:
          type: string
      required:
      - metadata-location
      - name
      type: object
    CreateViewRequest:
      example:
        schema: null
        view-version:
          summary:
            key: summary
          default-namespace:
          - accounting
          - tax
          schema-id: 5
          version-id: 1
          timestamp-ms: 5
          representations:
          - null
          - null
          default-catalog: default-catalog
        name: name
        location: location
        properties:
          key: properties
      properties:
        name:
          type: string
        location:
          type: string
        schema:
          $ref: '#/components/schemas/Schema'
        view-version:
          $ref: '#/components/schemas/ViewVersion'
        properties:
          additionalProperties:
            type: string
          type: object
      required:
      - name
      - properties
      - schema
      - view-version
      type: object
    LoadViewResult:
      description: |
        Result used when a view is successfully loaded.


        The view metadata JSON is returned in the `metadata` field. The corresponding file location of view metadata is returned in the `metadata-location` field.
        Clients can check whether metadata has changed by comparing metadata locations after the view has been created.

        The `config` map returns view-specific configuration for the view's resources.

        The following configurations should be respected by clients:

        ## General Configurations

        - `token`: Authorization bearer token to use for view requests if OAuth2 security is enabled
      example:
        metadata:
          versions:
          - summary:
              key: summary
            default-namespace:
            - accounting
            - tax
            schema-id: 5
            version-id: 1
            timestamp-ms: 5
            representations:
            - null
            - null
            default-catalog: default-catalog
          - summary:
              key: summary
            default-namespace:
            - accounting
            - tax
            schema-id: 5
            version-id: 1
            timestamp-ms: 5
            representations:
            - null
            - null
            default-catalog: default-catalog
          schemas:
          - null
          - null
          format-version: 1
          location: location
          current-version-id: 6
          view-uuid: view-uuid
          version-log:
          - version-id: 2
            timestamp-ms: 7
          - version-id: 2
            timestamp-ms: 7
          properties:
            key: properties
        metadata-location: metadata-location
        config:
          key: config
      properties:
        metadata-location:
          type: string
        metadata:
          $ref: '#/components/schemas/ViewMetadata'
        config:
          additionalProperties:
            type: string
          type: object
      required:
      - metadata
      - metadata-location
      type: object
    TokenType:
      description: |-
        Token type identifier, from RFC 8693 Section 3

        See https://datatracker.ietf.org/doc/html/rfc8693#section-3
      enum:
      - urn:ietf:params:oauth:token-type:access_token
      - urn:ietf:params:oauth:token-type:refresh_token
      - urn:ietf:params:oauth:token-type:id_token
      - urn:ietf:params:oauth:token-type:saml1
      - urn:ietf:params:oauth:token-type:saml2
      - urn:ietf:params:oauth:token-type:jwt
      type: string
    OAuthClientCredentialsRequest:
      description: |-
        OAuth2 client credentials request

        See https://datatracker.ietf.org/doc/html/rfc6749#section-4.4
      properties:
        grant_type:
          enum:
          - client_credentials
          type: string
        scope:
          type: string
        client_id:
          description: |-
            Client ID

            This can be sent in the request body, but OAuth2 recommends sending it in a Basic Authorization header.
          type: string
        client_secret:
          description: |-
            Client secret

            This can be sent in the request body, but OAuth2 recommends sending it in a Basic Authorization header.
          type: string
      required:
      - client_id
      - client_secret
      - grant_type
      type: object
    OAuthTokenExchangeRequest:
      description: |-
        OAuth2 token exchange request

        See https://datatracker.ietf.org/doc/html/rfc8693
      properties:
        grant_type:
          enum:
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        scope:
          type: string
        requested_token_type:
          $ref: '#/components/schemas/TokenType'
        subject_token:
          description: Subject token for token exchange request
          type: string
        subject_token_type:
          $ref: '#/components/schemas/TokenType'
        actor_token:
          description: Actor token for token exchange request
          type: string
        actor_token_type:
          $ref: '#/components/schemas/TokenType'
      required:
      - grant_type
      - subject_token
      - subject_token_type
      type: object
    OAuthTokenRequest:
      anyOf:
      - $ref: '#/components/schemas/OAuthClientCredentialsRequest'
      - $ref: '#/components/schemas/OAuthTokenExchangeRequest'
    CounterResult:
      properties:
        unit:
          type: string
        value:
          format: int64
          type: integer
      required:
      - unit
      - value
      type: object
    TimerResult:
      properties:
        time-unit:
          type: string
        count:
          format: int64
          type: integer
        total-duration:
          format: int64
          type: integer
      required:
      - count
      - time-unit
      - total-duration
      type: object
    MetricResult:
      anyOf:
      - $ref: '#/components/schemas/CounterResult'
      - $ref: '#/components/schemas/TimerResult'
    Metrics:
      additionalProperties:
        $ref: '#/components/schemas/MetricResult'
      example:
        metrics:
          total-planning-duration:
            count: 1
            time-unit: nanoseconds
            total-duration: 2644235116
          result-data-files:
            unit: count
            value: 1
          result-delete-files:
            unit: count
            value: 0
          total-data-manifests:
            unit: count
            value: 1
          total-delete-manifests:
            unit: count
            value: 0
          scanned-data-manifests:
            unit: count
            value: 1
          skipped-data-manifests:
            unit: count
            value: 0
          total-file-size-bytes:
            unit: bytes
            value: 10
          total-delete-file-size-bytes:
            unit: bytes
            value: 0
      type: object
    ReportMetricsRequest:
      anyOf:
      - $ref: '#/components/schemas/ScanReport'
      - $ref: '#/components/schemas/CommitReport'
      example:
        report-type: report-type
      properties:
        report-type:
          type: string
      required:
      - report-type
    ScanReport:
      properties:
        table-name:
          type: string
        snapshot-id:
          format: int64
          type: integer
        filter:
          $ref: '#/components/schemas/Expression'
        schema-id:
          type: integer
        projected-field-ids:
          items:
            type: integer
          type: array
        projected-field-names:
          items:
            type: string
          type: array
        metrics:
          additionalProperties:
            $ref: '#/components/schemas/MetricResult'
          example:
            metrics:
              total-planning-duration:
                count: 1
                time-unit: nanoseconds
                total-duration: 2644235116
              result-data-files:
                unit: count
                value: 1
              result-delete-files:
                unit: count
                value: 0
              total-data-manifests:
                unit: count
                value: 1
              total-delete-manifests:
                unit: count
                value: 0
              scanned-data-manifests:
                unit: count
                value: 1
              skipped-data-manifests:
                unit: count
                value: 0
              total-file-size-bytes:
                unit: bytes
                value: 10
              total-delete-file-size-bytes:
                unit: bytes
                value: 0
          type: object
        metadata:
          additionalProperties:
            type: string
          type: object
      required:
      - filter
      - metrics
      - projected-field-ids
      - projected-field-names
      - schema-id
      - snapshot-id
      - table-name
      type: object
    CommitReport:
      properties:
        table-name:
          type: string
        snapshot-id:
          format: int64
          type: integer
        sequence-number:
          format: int64
          type: integer
        operation:
          type: string
        metrics:
          additionalProperties:
            $ref: '#/components/schemas/MetricResult'
          example:
            metrics:
              total-planning-duration:
                count: 1
                time-unit: nanoseconds
                total-duration: 2644235116
              result-data-files:
                unit: count
                value: 1
              result-delete-files:
                unit: count
                value: 0
              total-data-manifests:
                unit: count
                value: 1
              total-delete-manifests:
                unit: count
                value: 0
              scanned-data-manifests:
                unit: count
                value: 1
              skipped-data-manifests:
                unit: count
                value: 0
              total-file-size-bytes:
                unit: bytes
                value: 10
              total-delete-file-size-bytes:
                unit: bytes
                value: 0
          type: object
        metadata:
          additionalProperties:
            type: string
          type: object
      required:
      - metrics
      - operation
      - sequence-number
      - snapshot-id
      - table-name
      type: object
    OAuthError:
      properties:
        error:
          enum:
          - invalid_request
          - invalid_client
          - invalid_grant
          - unauthorized_client
          - unsupported_grant_type
          - invalid_scope
          type: string
        error_description:
          type: string
        error_uri:
          type: string
      required:
      - error
      type: object
    OAuthTokenResponse:
      example:
        access_token: access_token
        refresh_token: refresh_token
        issued_token_type: null
        scope: scope
        token_type: bearer
        expires_in: 0
      properties:
        access_token:
          description: "The access token, for client credentials or token exchange"
          type: string
        token_type:
          description: |-
            Access token type for client credentials or token exchange

            See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1
          enum:
          - bearer
          - mac
          - N_A
          type: string
        expires_in:
          description: Lifetime of the access token in seconds for client credentials
            or token exchange
          type: integer
        issued_token_type:
          $ref: '#/components/schemas/TokenType'
        refresh_token:
          description: Refresh token for client credentials or token exchange
          type: string
        scope:
          description: Authorization scope for client credentials or token exchange
          type: string
      required:
      - access_token
      - token_type
      type: object
    IcebergErrorResponse:
      additionalProperties: false
      description: JSON wrapper for all error responses (non-2xx)
      example:
        error:
          message: The server does not support this operation
          type: UnsupportedOperationException
          code: 406
      properties:
        error:
          $ref: '#/components/schemas/ErrorModel'
      required:
      - error
      type: object
    CreateNamespaceResponse:
      example:
        namespace:
        - accounting
        - tax
        properties:
          owner: Ralph
          created_at: "1452120468"
      properties:
        namespace:
          description: Reference to one or more levels of a namespace
          example:
          - accounting
          - tax
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          default: {}
          description: "Properties stored on the namespace, if supported by the server."
          example:
            owner: Ralph
            created_at: "1452120468"
          type: object
      required:
      - namespace
      type: object
    GetNamespaceResponse:
      example:
        namespace:
        - accounting
        - tax
        properties:
          owner: Ralph
          transient_lastDdlTime: "1452120468"
      properties:
        namespace:
          description: Reference to one or more levels of a namespace
          example:
          - accounting
          - tax
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          default: {}
          description: "Properties stored on the namespace, if supported by the server.\
            \ If the server does not support namespace properties, it should return\
            \ null for this field. If namespace properties are supported, but none\
            \ are set, it should return an empty object."
          example:
            owner: Ralph
            transient_lastDdlTime: "1452120468"
          nullable: true
          type: object
      required:
      - namespace
      type: object
    ListTablesResponse:
      example:
        next-page-token: next-page-token
        identifiers:
        - namespace:
          - accounting
          - tax
          name: name
        - namespace:
          - accounting
          - tax
          name: name
      properties:
        next-page-token:
          description: |-
            An opaque token that allows clients to make use of pagination for list APIs (e.g. ListTables). Clients may initiate the first paginated request by sending an empty query parameter `pageToken` to the server.
            Servers that support pagination should identify the `pageToken` parameter and return a `next-page-token` in the response if there are more results available.  After the initial request, the value of `next-page-token` from each response must be used as the `pageToken` parameter value for the next request. The server must return `null` value for the `next-page-token` in the last response.
            Servers that support pagination must return all results in a single response with the value of `next-page-token` set to `null` if the query parameter `pageToken` is not set in the request.
            Servers that do not support pagination should ignore the `pageToken` parameter and return all results in a single response. The `next-page-token` must be omitted from the response.
            Clients must interpret either `null` or missing response value of `next-page-token` as the end of the listing results.
          nullable: true
          type: string
        identifiers:
          items:
            $ref: '#/components/schemas/TableIdentifier'
          type: array
          uniqueItems: true
      type: object
    ListNamespacesResponse:
      example:
        next-page-token: next-page-token
        namespaces:
        - - accounting
          - tax
        - - accounting
          - tax
      properties:
        next-page-token:
          description: |-
            An opaque token that allows clients to make use of pagination for list APIs (e.g. ListTables). Clients may initiate the first paginated request by sending an empty query parameter `pageToken` to the server.
            Servers that support pagination should identify the `pageToken` parameter and return a `next-page-token` in the response if there are more results available.  After the initial request, the value of `next-page-token` from each response must be used as the `pageToken` parameter value for the next request. The server must return `null` value for the `next-page-token` in the last response.
            Servers that support pagination must return all results in a single response with the value of `next-page-token` set to `null` if the query parameter `pageToken` is not set in the request.
            Servers that do not support pagination should ignore the `pageToken` parameter and return all results in a single response. The `next-page-token` must be omitted from the response.
            Clients must interpret either `null` or missing response value of `next-page-token` as the end of the listing results.
          nullable: true
          type: string
        namespaces:
          items:
            $ref: '#/components/schemas/Namespace'
          type: array
          uniqueItems: true
      type: object
    UpdateNamespacePropertiesResponse:
      example:
        removed:
        - removed
        - removed
        missing:
        - missing
        - missing
        updated:
        - updated
        - updated
      properties:
        updated:
          description: List of property keys that were added or updated
          items:
            type: string
          type: array
          uniqueItems: true
        removed:
          description: List of properties that were removed
          items:
            type: string
          type: array
        missing:
          description: List of properties requested for removal that were not found
            in the namespace's properties. Represents a partial success response.
            Server's do not need to implement this.
          items:
            type: string
          nullable: true
          type: array
      required:
      - removed
      - updated
      type: object
    CommitTableResponse:
      example:
        metadata:
          metadata-log:
          - timestamp-ms: 6
            metadata-file: metadata-file
          - timestamp-ms: 6
            metadata-file: metadata-file
          current-snapshot-id: 9
          last-updated-ms: 6
          last-sequence-number: 6
          format-version: 1
          statistics-files:
          - file-size-in-bytes: 6
            snapshot-id: 3
            blob-metadata:
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            statistics-path: statistics-path
            file-footer-size-in-bytes: 1
          - file-size-in-bytes: 6
            snapshot-id: 3
            blob-metadata:
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            - snapshot-id: 2
              sequence-number: 6
              type: type
              fields:
              - 6
              - 6
              properties: "{}"
            statistics-path: statistics-path
            file-footer-size-in-bytes: 1
          table-uuid: table-uuid
          default-sort-order-id: 7
          snapshots:
          - summary:
              operation: append
            snapshot-id: 1
            schema-id: 7
            manifest-list: manifest-list
            timestamp-ms: 6
            sequence-number: 1
            parent-snapshot-id: 1
          - summary:
              operation: append
            snapshot-id: 1
            schema-id: 7
            manifest-list: manifest-list
            timestamp-ms: 6
            sequence-number: 1
            parent-snapshot-id: 1
          last-partition-id: 3
          snapshot-log:
          - snapshot-id: 8
            timestamp-ms: 9
          - snapshot-id: 8
            timestamp-ms: 9
          refs:
            key:
              max-snapshot-age-ms: 5
              snapshot-id: 1
              max-ref-age-ms: 4
              min-snapshots-to-keep: 9
              type: tag
          current-schema-id: 1
          schemas:
          - null
          - null
          partition-statistics-files:
          - file-size-in-bytes: 6
            snapshot-id: 5
            statistics-path: statistics-path
          - file-size-in-bytes: 6
            snapshot-id: 5
            statistics-path: statistics-path
          sort-orders:
          - order-id: 2
            fields:
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
          - order-id: 2
            fields:
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
            - transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              null-order: null
              source-id: 4
              direction: null
          location: location
          last-column-id: 5
          default-spec-id: 9
          partition-specs:
          - spec-id: 5
            fields:
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
          - spec-id: 5
            fields:
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
            - field-id: 2
              transform: "[\"identity\",\"year\",\"month\",\"day\",\"hour\",\"bucket[256]\"\
                ,\"truncate[16]\"]"
              name: name
              source-id: 7
          properties:
            key: properties
        metadata-location: metadata-location
      properties:
        metadata-location:
          type: string
        metadata:
          $ref: '#/components/schemas/TableMetadata'
      required:
      - metadata
      - metadata-location
      type: object
    StatisticsFile:
      example:
        file-size-in-bytes: 6
        snapshot-id: 3
        blob-metadata:
        - snapshot-id: 2
          sequence-number: 6
          type: type
          fields:
          - 6
          - 6
          properties: "{}"
        - snapshot-id: 2
          sequence-number: 6
          type: type
          fields:
          - 6
          - 6
          properties: "{}"
        statistics-path: statistics-path
        file-footer-size-in-bytes: 1
      properties:
        snapshot-id:
          format: int64
          type: integer
        statistics-path:
          type: string
        file-size-in-bytes:
          format: int64
          type: integer
        file-footer-size-in-bytes:
          format: int64
          type: integer
        blob-metadata:
          items:
            $ref: '#/components/schemas/BlobMetadata'
          type: array
      required:
      - blob-metadata
      - file-footer-size-in-bytes
      - file-size-in-bytes
      - snapshot-id
      - statistics-path
      type: object
    BlobMetadata:
      example:
        snapshot-id: 2
        sequence-number: 6
        type: type
        fields:
        - 6
        - 6
        properties: "{}"
      properties:
        type:
          type: string
        snapshot-id:
          format: int64
          type: integer
        sequence-number:
          format: int64
          type: integer
        fields:
          items:
            type: integer
          type: array
        properties:
          type: object
      required:
      - fields
      - sequence-number
      - snapshot-id
      - type
      type: object
    PartitionStatisticsFile:
      example:
        file-size-in-bytes: 6
        snapshot-id: 5
        statistics-path: statistics-path
      properties:
        snapshot-id:
          format: int64
          type: integer
        statistics-path:
          type: string
        file-size-in-bytes:
          format: int64
          type: integer
      required:
      - file-size-in-bytes
      - snapshot-id
      - statistics-path
      type: object
    BooleanTypeValue:
      example: true
      type: boolean
    IntegerTypeValue:
      example: 42
      type: integer
    LongTypeValue:
      example: 9223372036854775807
      format: int64
      type: integer
    FloatTypeValue:
      example: 3.14
      format: float
      type: number
    DoubleTypeValue:
      example: 123.456
      format: double
      type: number
    DecimalTypeValue:
      description: "Decimal type values are serialized as strings. Decimals with a\
        \ positive scale serialize as numeric plain text, while decimals with a negative\
        \ scale use scientific notation and the exponent will be equal to the negated\
        \ scale. For instance, a decimal with a positive scale is '123.4500', with\
        \ zero scale is '2', and with a negative scale is '2E+20'"
      example: "123.4500"
      type: string
    StringTypeValue:
      example: hello
      type: string
    UUIDTypeValue:
      description: UUID type values are serialized as a 36-character lowercase string
        in standard UUID format as specified by RFC-4122
      example: eb26bdb1-a1d8-4aa6-990e-da940875492c
      format: uuid
      maxLength: 36
      minLength: 36
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      type: string
    DateTypeValue:
      description: Date type values follow the 'YYYY-MM-DD' ISO-8601 standard date
        format
      example: 2007-12-03
      format: date
      type: string
    TimeTypeValue:
      description: Time type values follow the 'HH:MM:SS.ssssss' ISO-8601 format with
        microsecond precision
      example: 22:31:08.123456
      type: string
    TimestampTypeValue:
      description: Timestamp type values follow the 'YYYY-MM-DDTHH:MM:SS.ssssss' ISO-8601
        format with microsecond precision
      example: 2007-12-03T10:15:30.123456
      type: string
    TimestampTzTypeValue:
      description: "TimestampTz type values follow the 'YYYY-MM-DDTHH:MM:SS.ssssss+00:00'\
        \ ISO-8601 format with microsecond precision, and a timezone offset (+00:00\
        \ for UTC)"
      example: 2007-12-03T10:15:30.123456+00:00
      type: string
    TimestampNanoTypeValue:
      description: Timestamp_ns type values follow the 'YYYY-MM-DDTHH:MM:SS.sssssssss'
        ISO-8601 format with nanosecond precision
      example: 2007-12-03T10:15:30.123456789
      type: string
    TimestampTzNanoTypeValue:
      description: "Timestamp_ns type values follow the 'YYYY-MM-DDTHH:MM:SS.sssssssss+00:00'\
        \ ISO-8601 format with nanosecond precision, and a timezone offset (+00:00\
        \ for UTC)"
      example: 2007-12-03T10:15:30.123456789+00:00
      type: string
    FixedTypeValue:
      description: Fixed length type values are stored and serialized as an uppercase
        hexadecimal string preserving the fixed length
      example: 78797A
      type: string
    BinaryTypeValue:
      description: Binary type values are stored and serialized as an uppercase hexadecimal
        string
      example: 78797A
      type: string
    CountMap:
      example:
        keys:
        - 1
        - 2
        values:
        - 100
        - 200
      properties:
        keys:
          description: List of integer column ids for each corresponding value
          items:
            $ref: '#/components/schemas/IntegerTypeValue'
          type: array
        values:
          description: "List of Long values, matched to 'keys' by index"
          items:
            $ref: '#/components/schemas/LongTypeValue'
          type: array
      type: object
    ValueMap:
      example:
        keys:
        - 1
        - 2
        values:
        - 100
        - test
      properties:
        keys:
          description: List of integer column ids for each corresponding value
          items:
            $ref: '#/components/schemas/IntegerTypeValue'
          type: array
        values:
          description: "List of primitive type values, matched to 'keys' by index"
          items:
            $ref: '#/components/schemas/PrimitiveTypeValue'
          type: array
      type: object
    PrimitiveTypeValue:
      oneOf:
      - $ref: '#/components/schemas/BooleanTypeValue'
      - $ref: '#/components/schemas/IntegerTypeValue'
      - $ref: '#/components/schemas/LongTypeValue'
      - $ref: '#/components/schemas/FloatTypeValue'
      - $ref: '#/components/schemas/DoubleTypeValue'
      - $ref: '#/components/schemas/DecimalTypeValue'
      - $ref: '#/components/schemas/StringTypeValue'
      - $ref: '#/components/schemas/UUIDTypeValue'
      - $ref: '#/components/schemas/DateTypeValue'
      - $ref: '#/components/schemas/TimeTypeValue'
      - $ref: '#/components/schemas/TimestampTypeValue'
      - $ref: '#/components/schemas/TimestampTzTypeValue'
      - $ref: '#/components/schemas/TimestampNanoTypeValue'
      - $ref: '#/components/schemas/TimestampTzNanoTypeValue'
      - $ref: '#/components/schemas/FixedTypeValue'
      - $ref: '#/components/schemas/BinaryTypeValue'
    FileFormat:
      enum:
      - avro
      - orc
      - parquet
      type: string
    ContentFile:
      discriminator:
        mapping:
          data: '#/components/schemas/DataFile'
          position-deletes: '#/components/schemas/PositionDeleteFile'
          equality-deletes: '#/components/schemas/EqualityDeleteFile'
        propertyName: content
      properties:
        content:
          type: string
        file-path:
          type: string
        file-format:
          $ref: '#/components/schemas/FileFormat'
        spec-id:
          type: integer
        partition:
          description: A list of partition field values ordered based on the fields
            of the partition spec specified by the `spec-id`
          example:
          - 1
          - bar
          items:
            $ref: '#/components/schemas/PrimitiveTypeValue'
          type: array
        file-size-in-bytes:
          description: Total file size in bytes
          format: int64
          type: integer
        record-count:
          description: Number of records in the file
          format: int64
          type: integer
        key-metadata:
          allOf:
          - $ref: '#/components/schemas/BinaryTypeValue'
          description: Encryption key metadata blob
        split-offsets:
          description: List of splittable offsets
          items:
            format: int64
            type: integer
          type: array
        sort-order-id:
          type: integer
      required:
      - content
      - file-format
      - file-path
      - file-size-in-bytes
      - record-count
      - spec-id
      type: object
    DataFile:
      allOf:
      - $ref: '#/components/schemas/ContentFile'
      properties:
        content:
          enum:
          - data
          type: string
        column-sizes:
          allOf:
          - $ref: '#/components/schemas/CountMap'
          description: "Map of column id to total count, including null and NaN"
        value-counts:
          allOf:
          - $ref: '#/components/schemas/CountMap'
          description: Map of column id to null value count
        null-value-counts:
          allOf:
          - $ref: '#/components/schemas/CountMap'
          description: Map of column id to null value count
        nan-value-counts:
          allOf:
          - $ref: '#/components/schemas/CountMap'
          description: Map of column id to number of NaN values in the column
        lower-bounds:
          allOf:
          - $ref: '#/components/schemas/ValueMap'
          description: Map of column id to lower bound primitive type values
        upper-bounds:
          allOf:
          - $ref: '#/components/schemas/ValueMap'
          description: Map of column id to upper bound primitive type values
      required:
      - content
      type: object
    PositionDeleteFile:
      allOf:
      - $ref: '#/components/schemas/ContentFile'
      properties:
        content:
          enum:
          - position-deletes
          type: string
      required:
      - content
    EqualityDeleteFile:
      allOf:
      - $ref: '#/components/schemas/ContentFile'
      properties:
        content:
          enum:
          - equality-deletes
          type: string
        equality-ids:
          description: List of equality field IDs
          items:
            type: integer
          type: array
      required:
      - content
    Snapshot_summary:
      additionalProperties:
        type: string
      example:
        operation: append
      properties:
        operation:
          enum:
          - append
          - replace
          - overwrite
          - delete
          type: string
      required:
      - operation
      type: object
    SnapshotLog_inner:
      example:
        snapshot-id: 8
        timestamp-ms: 9
      properties:
        snapshot-id:
          format: int64
          type: integer
        timestamp-ms:
          format: int64
          type: integer
      required:
      - snapshot-id
      - timestamp-ms
      type: object
    MetadataLog_inner:
      example:
        timestamp-ms: 6
        metadata-file: metadata-file
      properties:
        metadata-file:
          type: string
        timestamp-ms:
          format: int64
          type: integer
      required:
      - metadata-file
      - timestamp-ms
      type: object
  securitySchemes:
    OAuth2:
      description: |-
        This scheme is used for OAuth2 authorization.

        For unauthorized requests, services should return an appropriate 401 or 403 response. Implementations must not return altered success (200) responses when a request is unauthenticated or unauthorized.
        If a separate authorization server is used, substitute the tokenUrl with the full token path of the external authorization server, and use the resulting token to access the resources defined in the spec.
      flows:
        clientCredentials:
          scopes:
            catalog: Allows interacting with the Config and Catalog APIs
          tokenUrl: /v1/oauth/tokens
      type: oauth2
    BearerAuth:
      scheme: bearer
      type: http

